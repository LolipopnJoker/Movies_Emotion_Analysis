DB  <- read.csv("G:/My Drive/Movies_Emotion_Analysis/dataset.csv", row.names = 1) # Importing the data.
DB  <- read.csv("G:/My Drive/Movies_Emotion_Analysis/dataset.csv", row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
number_of_subtitles_files <- length(DB$Title)
adding_subtitles <- function(){
#' Adding the subtitles files to the data frame
#'
#' @return A data frame with the subtitles of all the movies.
#'
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('G:/My Drive/Portfolio/Emotion Analysis/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
.GlobalEnv$DB <- DB # Returning the dataframe to the global environment.
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
}
adding_subtitles()
adding_subtitles <- function(){
#' Adding the subtitles files to the data frame
#'
#' @return A data frame with the subtitles of all the movies.
#'
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('G:/My Drive/Movies_Emotion_Analysis/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
.GlobalEnv$DB <- DB # Returning the dataframe to the global environment.
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
}
adding_subtitles()
adding_subtitles <- function(){
#' Adding the subtitles files to the data frame
#'
#' @return A data frame with the subtitles of all the movies.
#'
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('G:/My Drive/Movies_Emotion_Analysis/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
.GlobalEnv$DB <- DB # Returning the dataframe to the global environment.
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
}
adding_subtitles()
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
suppressWarnings(library(corrplot)) # Importing corrplot
suppressWarnings(library(psych)) # Importing psych
DB  <- read.csv("G:/My Drive/Movies_Emotion_Analysis/dataset.csv", row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
number_of_subtitles_files <- length(DB$Title)
adding_subtitles <- function(){
#' Adding the subtitles files to the data frame
#'
#' @return A data frame with the subtitles of all the movies.
#'
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('G:/My Drive/Movies_Emotion_Analysis/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
.GlobalEnv$DB <- DB # Returning the dataframe to the global environment.
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
}
adding_subtitles()
# Splitting the date column
DB <- separate(DB, Release.Date, c("release.month", "release.day", "release.year"), sep = " ") # Separating the date column
DB <- separate(DB, Genre, c("Genre.1", "Genre.2", "Genre.3", "Genre.4", "Genre.5", "Genre.6"), sep = ", ")# Separating the genre column
# Cleaning from unwanted symbols that might affect the analysis.
DB[] <- lapply(DB, gsub, pattern=',', replacement='') # Deleting all the , symbols.
DB[] <- lapply(DB, gsub, pattern="'", replacement='') # Deleting all the ' symbols.
DB[] <- lapply(DB, gsub, pattern='//[', replacement='') # Deleting all the [ symbols.
DB[] <- lapply(DB, gsub, pattern='\\]', replacement='') # Deleting all the ] symbols.
cleaning_subtitles <- function(){
#' Adding the subtitles files to the data frame
#'
#' @return A data frame with the subtitles of all the movies.
#'
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
unwanted_words <- c('<b>', '<i>', 'font', 'listcontent', 'color808080', 'bfont',  'colorffff00')
for (i in 1:number_of_subtitles_files){
corpus <- VCorpus(VectorSource(DB$Subtitles[i]))
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, removeWords, unwanted_words)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
DB$Subtitles[i] <- corpus[[1]]
setTxtProgressBar(progress_bar, i)
}
close(progress_bar) # Closing progress bar
.GlobalEnv$DB <- DB # Returning the dataframe to the global environment.
}
cleaning_subtitles()
worldwide_sales_mean <- mean(as.numeric(DB$World.Sales..in...), na.rm = TRUE) # Worldwide Sales Mean calculation
worldwide_sales_mean # Displaying Worldwide Sales Mean
worldwide_sales_sd <- sd(as.numeric(DB$World.Sales..in...), na.rm = TRUE) # Worldwide Sales SD calculation
worldwide_sales_sd # Displaying Worldwide Sales SD
DB$Subtitles <- as.character(DB$Subtitles)
sentiment_score_DF <- get_nrc_sentiment(DB$Subtitles) # Creating a dataframe with sentiment scores.
full_DB <- cbind(DB, sentiment_score_DF) # Merging the dataframes
sub_DB <- full_DB[, (c(9, 19:28))] # Only the relevant data for the correlation matrix
sub_DB$World.Sales..in... <- as.numeric(sub_DB$World.Sales..in...) # Turning the first column to numeric
cor_for_table <- cor(sub_DB) # Calculating the correlation matrix
corrplot(corr = cor_for_table,
method = "number",
type = "lower",
title = "Movies subtitles and emotions")
colnames(sub_DB)[1] <- "Sales"
cor_for_table <- cor(sub_DB) # Calculating the correlation matrix
corrplot(corr = cor_for_table,
method = "number",
type = "lower",
title = "Movies subtitles and emotions")
corrplot(corr = cor_for_table,
method = "number",
type = "lower")
corr.test(sub_DB)
DB  <- read.csv(file.choose(), row.names = 1) # Importing the data.
